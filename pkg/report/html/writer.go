package htmlreport

import (
	"html/template"
	"os"
	"sort"

	"github.com/Shunsuiky0raku/redcheck/pkg/checks"
	"github.com/Shunsuiky0raku/redcheck/pkg/scoring"
)

type ViewModel struct {
	Hostname      string
	Time          string
	Scores        scoring.Scores
	Results       []checks.CheckResult
	TopFixes      []checks.CheckResult
	Version       string
	Commit        string
	BuildDate     string
	BuiltInRules  int
	ExternalRules int
	Jobs          int
	Timeout       string
	IsRoot        bool
}

const tpl = `<!doctype html>
<meta charset="utf-8">
<title>RedCheck Report</title>
<style>
/* (styles unchanged) */
</style>
	<script>
function copyFixes(){
  // grab ALL remediation cells (weâ€™ll tag them with class "rem")
  const items = Array.from(document.querySelectorAll('td.rem')).map(td => td.innerText.trim());
  // keep only non-empty & unique
  const seen = new Set();
  const cmds = items.filter(x => x).filter(x => (seen.has(x) ? false : seen.add(x)));
  if (cmds.length === 0) { alert('No remediation commands to copy.'); return; }
  navigator.clipboard.writeText(cmds.join('\n')).then(
    () => alert('All remediations copied to clipboard.'),
    () => alert('Copy failed (clipboard not available).')
  );
}
</script>


<h1>RedCheck Report</h1>
<div style="margin:8px 0">
  <button onclick="copyFixes()">Copy all remediation commands</button>
</div>
<td class="small rem">{{.Remediation}}</td>


<div class="header-meta">
  Host: {{.Hostname}} &middot; Time: {{.Time}} &middot;
  Built-in rules: {{.BuiltInRules}} {{if gt .ExternalRules 0}}+ External: {{.ExternalRules}}{{end}} &middot;
  Jobs: {{.Jobs}} &middot; Timeout: {{.Timeout}}
</div>

{{if not .IsRoot}}
<div class="warn">
  <b>Warning:</b> report generated as non-root. Some checks may be incomplete or marked <code>na</code>/<code>error</code>.
  For full coverage run with root privileges (e.g., <code>sudo ./redcheck scan ...</code>).
</div>
{{end}}
{{if .Evidence}}
<div class="small"><details><summary>Evidence</summary><pre>{{.Evidence}}</pre></details></div>
{{end}}


<!-- (rest of template unchanged) -->

<div class="footer">
  Generated by RedCheck v{{.Version}} (commit {{.Commit}}, built {{.BuildDate}})
</div>
`

func Write(
	path, hostname, tstamp string,
	scores scoring.Scores,
	results []checks.CheckResult,
	builtIn, external, jobs int,
	timeout string, isRoot bool,
	version, commit, buildDate string,
) error {
	// pick Top 5 fails by severity
	fail := make([]checks.CheckResult, 0, len(results))
	for _, r := range results {
		if r.Status == "fail" {
			fail = append(fail, r)
		}
	}
	sevRank := map[string]int{"Critical": 0, "High": 1, "Medium": 2, "Low": 3}
	sort.Slice(fail, func(i, j int) bool {
		si, sj := sevRank[fail[i].Severity], sevRank[fail[j].Severity]
		if si != sj {
			return si < sj
		}
		return fail[i].ID < fail[j].ID
	})
	if len(fail) > 5 {
		fail = fail[:5]
	}

	vm := ViewModel{
		Hostname:      hostname,
		Time:          tstamp,
		Scores:        scores,
		Results:       results,
		TopFixes:      fail,
		Version:       version,
		Commit:        commit,
		BuildDate:     buildDate,
		BuiltInRules:  builtIn,
		ExternalRules: external,
		Jobs:          jobs,
		Timeout:       timeout,
		IsRoot:        isRoot,
	}

	t := template.Must(template.New("r").Parse(tpl))
	f, err := os.Create(path)
	if err != nil {
		return err
	}
	defer f.Close()
	return t.Execute(f, vm)
}
